/**
 * Lib name ::  ESP8266_SSD1306
 *              WebSocketsClient
 */

// WiFi includes
#include <ESP8266WiFi.h>


// OTA Includes

#include <ESP8266WebServer.h>
#include <WiFiManager.h>


// Include the correct display library
// For a connection via I2C using Wire include
#include <Wire.h>        // Only needed for Arduino 1.6.5 and earlier

// Initialize the OLED display using brzo_i2c
// D3 -> SDA
// D5 -> SCL
// เลือกจอ OLED SSD1306 0.95inc กับ SH1106 1.3inc 
#define SSD1306;
// #define SH1106;

/* OLED 0.95 inc 128 x 64 */
#ifdef SSD1306
  #include <SSD1306Wire.h> // legacy include: `#include "SSD1306.h"
  //#include "SSD1306Wire.h" // legacy include: `#include "SSD1306.h"`
  SSD1306Wire display(0x3c, D3, D5);
#endif

/* OLED 1.3 inc 128 x 64 */
#ifdef SH1106
  #include <SH1106Wire.h> // legacy include: `#include "SH1106.h"`
  //#include "SH1106Wire.h" // legacy include: `#include "SH1106.h"`
  SH1106Wire display(0x3c, D3, D5);
#endif

// My XBMP
#include <xbmp.h>
#include <show.h>



int read_pin = A0;
int calibate = 0;

/*wifi*/
byte ledPin = 2;
// char ssid[] = "WSNCOM";   // SSID of your home WiFi
// char pass[] = "1q2w3e4r"; // password of your home WiFi
// char ssid[] = "Tonsonza";   // SSID of your home WiFi
// char pass[] = "0910345985";
char ssid[] = "projectsensor";   // SSID of your home WiFi
char pass[] = "0910345985";
int keyIndex = 0;            // your network key Index number (needed only for WEP)
WiFiClient  client;


//millis()
unsigned long last_time0 = 0;
unsigned long last_time1 = 0;
unsigned long last_time2 = 0;
unsigned long last_time3 = 0;


void setup()
{
  
  Serial.begin(74880);
  Serial.println("Booting");

  
  // setup pin

  WiFiManager wifiManager;

  // wifiManager.resetSettings();  // ใช้สำหรับล้าง config wifi manager ใหม่
  wifiManager.setConfigPortalTimeout(180);
  wifiManager.autoConnect("myesp8266");

  display.init();
  display.flipScreenVertically();
  display.setContrast(255);

  //WiFi.begin(ssid, password);

  // Wait for connection
  while (WiFi.status() != WL_CONNECTED)
  {
    delay(10);
  }
  
  digitalWrite(LedWifi, (WiFi.status() == WL_CONNECTED) ? LOW : HIGH);  
   LINE.setToken(LINE_TOKEN);
  ThingSpeak.begin(client);
  Blynk.begin(auth,  ssid, pass);
 
  timer.setInterval(1000L , onoffsensor);   //on-off  1s on app //
  sensor.begin();
}


void loop()
{
     if ((millis() - last_time0) >= 1000)
  {
       last_time0 = millis();
    Blynk.run();
    timer.run();
  }
     if ((millis() - last_time1) >= 10000)
  {
    last_time1 = millis();
    displayLogo2();
    delay(2000);
  }

  
  
  if ((millis() - last_time2) >= 3000)
  {
  
    last_time2 = millis();
    displayCTsenser();
    serialprintf("DO",sensorDo()); 
     serialprintf("Temp",sensorTemp()); 
    send_blynk();
   
    
  }
   if ((millis() - last_time3) >= 900000)
  {
  
    last_time3 = millis();
    senddata_thingspeak();
    ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);

  }



  //   for (int i = 0; i <=5 ; i++)
  //   {
  //     /* code */
     
  //     showph();
  //     delay(1000);
  //   }
  // } 
 
}